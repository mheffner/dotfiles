#
# Development related bash stuff.
#

# Deploy a branch to heroku.
#
# This relies on your git remotes being setup as such:
#
#  origin     -> Upstream GIT repo
#  staging    -> Staging deployment environment
#  production -> Production deployment environment
#
# When deploying to production this will create a tag off the
# deployed branch with the date as the tag name.
#
# Usage: heroku_deploy <staging|production> [<BRANCH>]
#   (BRANCH not implemented yet, defaults to master)
#
function heroku_deploy()
{
	local ENV="$1"

	if [ -z $ENV ]; then
		echo "Usage: heroku_deploy <environment> [<BRANCH>]"
		return 1
	fi

	if [ "$ENV" != "production" -a "$ENV" != "staging" ]; then
		echo "Environment must be either production or staging"
		return 1
	fi

	local BRANCH

	if [ $# -gt 1 ]; then
		BRANCH="$2"
		echo "NOT IMPLEMENTED: only works with master right now"
		return 1
	fi

	if [ "$ENV" = "production" ]; then
		local DATE=$(date -u "+%Y-%m-%d_%H-%M")
		local TAGNAME="v${DATE}"

		git tag -a -m "Tagged by $USER" $TAGNAME || \
		    { echo "Failed to tag $TAGNAME"; return 1; }

		git push origin $TAGNAME || \
		    { echo "Failed to push tag $TAGNAME to origin"; return 1; }

	fi

	git push $ENV master || \
	    { echo "Failed to push master to $ENV"; return 1; }

	return 0
}

#
# Remove all local/remote branches that have been merged to master.
#
function git-purge-merged-branches()
{
	git branch --merged master | grep -v ' master' | \
	    xargs -n 1 -I '{}' sh -c 'git branch -d {}; git push origin :{}'
}

#
# For a project that uses increasing v<num> tag versioning,
# bump the current tag by one and push it.
#
# Usage: git-tag [msg]
#
#  Examples:
#
#     $ git-tag
#      Bumping tag from v243 -> v244
#
#     $ git-tag "new statsd timing release"
#      Bumping tag from v243 -> v244
#
function git-tag()
{
	PREV_TAG=`git describe | cut -d '-' -f 1`
	TAG_PREFIX=`echo $PREV_TAG | sed -e 's/[0-9][0-9]*$//'`

	CURR_TAG=`echo $PREV_TAG | sed -e 's/^[^0-9]*//'`

	if [ -z $CURR_TAG ]; then
		echo "Can not parse tag!"
		return 1
	fi

	NEW_TAG=$(( $CURR_TAG + 1 ))
	NEW_TAG="${TAG_PREFIX}${NEW_TAG}"

	echo "Bumping tag from ${PREV_TAG} -> ${NEW_TAG}"

	MSG="$1"
	if [ -z "$MSG" ]; then
		MSG=$NEW_TAG
	fi

	git tag -a $NEW_TAG -m "${MSG}"
	git push origin ${NEW_TAG}
}

# Local Variables:
# mode: shell-script
# End:
